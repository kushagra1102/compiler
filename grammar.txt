<program> --> <moduleDeclarations> <otherModules> <driverModule> <otherModules>
<moduleDeclarations> --> <moduleDeclaration> <moduleDeclarations>
<moduleDeclarations> --> e
<moduleDeclaration> --> DECLARE MODULE ID SEMICOL
<otherModules> --> <module> <otherModules>
<otherModules> --> e
<driverModule> --> DRIVERDEF DRIVER PROGRAM DRIVERENDDEF <moduleDef>
<module> --> DEF MODULE ID ENDDEF TAKES INPUT SQBO <input_plist> SQBC SEMICOL <ret> <moduleDef>
<ret> --> RETURNS SQBO <output_plist> SQBC SEMICOL
<ret> --> e
<input_plist> --> ID COLON <dataType> <N1> 
<N1> --> COMMA ID COLON <dataType> <N1>
<N1> --> e
<output_plist> --> ID COLON <type> <N2>
<N2> --> COMMA ID COLON <type> <N2>
<N2> --> e
<dataType> --> ARRAY SQBO <range_arrays> SQBC OF <type>
<range_arrays> --> <index_arr> RANGEOP <index_arr>
<type> --> INTEGER
<type> --> REAL
<type> --> BOOLEAN
<moduleDef> --> START <statements> END
<statements> --> <statement> <statements>
<statements> --> e
<statement> --> <ioStmt>
<statement> --> <simpleStmt>
<statement> --> <declareStmt>
<statement> --> <condionalStmt>
<statement> --> <iterativeStmt>
<ioStmt> --> GET_VALUE BO ID BC SEMICOL
<ioStmt> --> PRINT BO <var_print> BC SEMICOL
<var> --> ID <whichId>
<var> --> NUM
<var> --> RNUM
<simpleStmt> --> <assignmentStmt>
<simpleStmt> --> <moduleReuseStmt>
<assignmentStmt> --> ID <whichStmt>
<whichStmt> --> <lvalueIDStmt>
<whichStmt> --> <lvalueARRStmt>
<lvalueARRStmt> --> SQBO <element_index_with_expressions> SQBC ASSIGNOP <expression> SEMICOL
<index_arr> --> <sign> <new_index>
<new_index> --> NUM
<new_index> --> ID
<sign> --> PLUS
<sign> --> MINUS
<sign> --> e
<moduleReuseStmt> --> <optional> USE MODULE ID WITH PARAMETERS <idList> SEMICOL
<optional> --> SQBO <idList> SQBC ASSIGNOP
<optional> --> e
<output_plist> --> ID <N3> 
<N3> --> COMMA ID <N3>
<N3> --> e
<arithmeticOrBooleanExpr> --> <AnyTerm> <N7>
<N7> --> <logicalOp> <AnyTerm> <N7>
<N7> --> e
<AnyTerm> --> <arithmeticExpr> <N8>
<AnyTerm> --> <boolConstt> <N8>
<N8> --> <relationalOp> <arithmeticExpr> <N8>
<N8> --> e
<arithmeticExpr> --> <arithmeticExpr> <op> <term>
<arithmeticExpr> --> <term> <N4>
<N4> --> <op1> <term> <N4>
<N4> --> e
<term> --> <term> <op> <factor>
<term> --> <factor> <N5> 
<N5> --> <op2> <factor> <N5>
<N5> --> e
<factor> --> BO <arithmeticExpr> BC
<factor> --> <id_num_rnum>
<factor> --> <boolConstt>
<factor> --> <array_element>
<array_element> --> ID SQBO <element_index_with_expressions> SQBC
<element_index_with_expressions> --> <sign> <new_index>
<element_index_with_expressions> --> <arrExpr>
<element_index_with_expressions> --> <sign> BO <arrExpr> BC
<arrExpr> --> <arrTerm> <arr_N4>
<arr_N4> --> <op1> <arrTerm> <arr_N4>
<arr_N4> --> e 
<arrTerm> --> <arrFactor> <arr_N5>
<arr_N5> --> <op2> <arrFactor> <arr_N5>
<arr_N5> --> e
<arrFactor> --> <id_num_rnum>
<arrFactor> --> <boolConstt>
<arrFactor> --> BO <arrExpr> BC
<element_index_with_expressions> --> <sign> <N_10>
<element_index_with_expressions> --> <arrExpr>
<N_10> --> <new_index>
<N_10> --> BO <arrExpr> BC
<op1> --> PLUS
<op1> --> MINUS
<op2> --> MUL
<op2> --> DIV
<logicalOp> --> AND
<logicalOp> --> OR
<declareStmt> --> DECLARE <idList> COLON <dataType> SEMICOL
<condionalStmt> --> SWITCH BO ID BC START <caseStmts> <deFault> END
<caseStmt> --> CASE <value> COLON <statements> BREAK SEMICOL <caseStmt>
<value> --> NUM
<value> --> TRUE
<value> --> FALSE
<deFault> --> DEFAULT COLON <statements> BREAK SEMICOL
<deFault> --> e
<iterativeStmt> --> FOR BO ID IN <range_for_loop> BC START <statements> END | WHILE BO <arithmeticOrBooleanExpr> BC START <statements> END
<index_for_loop> --> <sign_for_loop> <new_index_for_loop>
<new_index_for_loop> --> NUM
<sign_for_loop> --> PLUS
<sign_for_loop> --> MINUS
<sign_for_loop> --> e